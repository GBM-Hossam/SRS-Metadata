node {
	    // reference to maven
	    // ** NOTE: This 'maven-3.5.2' Maven tool must be configured in the Jenkins Global Configuration.
	    def mvnHome = tool 'maven-3.8.2'


	    // holds reference to docker image
	    def dockerImage
	    // ip address of the docker private repository(nexus)

	    def dockerImageTag = "devopsexample${env.BUILD_NUMBER}"

	    stage('Clone Repo') { // for display purposes
	      // Get some code from a GitHub repository
	      git 'https://github.com/GBM-Hossam/srs-metadata.git'
	      // Get the Maven tool.
	      // ** NOTE: This 'maven-3.5.2' Maven tool must be configured
	      // **       in the global configuration.
	      mvnHome = tool 'maven-3.8.2'
	    }

	    stage('Build Project') {
	      // build project via maven
	      sh "'${mvnHome}/bin/mvn' clean install -DskipTests"
	    }

	    stage('Code Quality Check via SonarQube') {

          def scannerHome = tool 'SonarQube';
           withSonarQubeEnv("SonarQube") {
           sh "${tool("SonarQube")}/bin/sonar-scanner \
           -Dsonar.projectKey=SRS-Metadata -Dsonar.sources=src/main/java/ -Dsonar.language=java \
           -Dsonar.java.binaries=target/classes -Dsonar.host.url=http://localhost:9000 -Dsonar.login=84e0d58a783d0d0275ba5942a55f968fcfa30246"
               }
           }

	    stage('Build Docker Image') {
	      // build docker image
	      dockerImage = docker.build("devopsexample:${env.BUILD_NUMBER}")
	    }

	    stage('Deploy Docker Image'){

	      // deploy docker image to nexus

	      echo "Docker Image Tag Name: ${dockerImageTag}"

		  //sh "docker stop devopsexample"
		  //
		  //sh "docker rm devopsexample"

		  sh "docker run --name srs_metadata_jenkins -d  --network 192a28b2785f -p 9090:9090 devopsexample:${env.BUILD_NUMBER}"

		  // docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
	      //    dockerImage.push("${env.BUILD_NUMBER}")
	      //      dockerImage.push("latest")
	      //  }

	    }
}